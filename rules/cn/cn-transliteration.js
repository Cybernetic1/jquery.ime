( function ( $ ) {
	'use strict';

	var cn = {
		id: 'cn',
		name: 'YKY Chinese',
		description: 'YKY`s testing.',
		date: '2013-11-15',
		URL: 'http://github.com/Cybernetic1/jquery.ime',
		author: 'YKY',
		license: 'GPLv3',
		version: '1.0',
		patternsList: [
['d','e',0,'的',4.094325318],
['y','i',1,'一',1.576567780],
['sh','i',4,'是',1.351646352],
['b','u',4,'不',1.156521205],
['l','e',0,'了',1.099991629],
['z','ai',4,'在',1.038314874],
['r','en',2,'人',0.965354115],
['y','ou',3,'有',0.920913177],
['w','o',3,'我',0.873391683],
['t','a',1,'他',0.824665563],
['zh','e',4,'这',0.802072234],
['g','e',4,'个',0.619925112],
['m','en',0,'们',0.604562640],
['zh','ong',1,'中',0.570810369],
['l','ai',2,'来',0.557853532],
['sh','ang',4,'上',0.552740460],
['d','a',4,'大',0.544724606],
['w','ei',2,'为',0.536958359],
['h','e',2,'和',0.522193291],
['g','uo',2,'国',0.509214232],
['d','e',0,'地',0.500945153],
['d','ao',4,'到',0.498715743],
['y','i',3,'以',0.470598497],
['sh','ui',4,'说',0.452175107],
['sh','i',2,'时',0.430756947],
['y','ao',1,'要',0.419118429],
['j','iu',4,'就',0.398497152],
['ch','u',1,'出',0.390305074],
['h','ui',4,'会',0.379779194],
['k','e',3,'可',0.373691465],
['y','e',3,'也',0.367051293],
['n','i',3,'你',0.364439461],
['d','ui',4,'对',0.363626558],
['sh','eng',1,'生',0.352463482],
['n','eng',2,'能',0.343847124],
['','er',2,'而',0.335517064],
['z','i',3,'子',0.331073229],
['n','a',3,'那',0.329986946],
['d','e',2,'得',0.325930183],
['y','u',2,'于',0.325845430],
['zh','ao',1,'着',0.323675966],
['x','ia',4,'下',0.321019174],
['z','i',4,'自',0.316110749],
['zh','i',1,'之',0.314723697],
['n','ian',2,'年',0.311046254],
['g','uo',4,'过',0.304864471],
['f','a',1,'发',0.296068271],
['h','ou',4,'后',0.294962351],
['z','uo',4,'作',0.280506320],
['l','i',3,'里',0.277924462],
['y','ong',4,'用',0.276728104],
['d','ao',4,'道',0.276322427],
['h','ang',2,'行',0.274851140],
['s','uo',3,'所',0.270293095],
['r','an',2,'然',0.264090640],
['j','ia',1,'家',0.263451894],
['zh','ong',3,'种',0.260120697],
['sh','i',4,'事',0.257964669],
['ch','eng',2,'成',0.257879400],
['f','ang',1,'方',0.254652593],
['d','uo',1,'多',0.248929715],
['j','ing',1,'经',0.248748323],
['m','a',0,'么',0.247007274],
['q','u',4,'去',0.246129256],
['f','a',3,'法',0.241243570],
['x','ue',2,'学',0.239923183],
['r','u',2,'如',0.232055130],
['d','ou',1,'都',0.227162208],
['t','ong',2,'同',0.226150860],
['x','ian',4,'现',0.224264077],
['d','ang',1,'当',0.221842422],
['m','ei',2,'没',0.221259488],
['d','ong',4,'动',0.220584050],
['m','ian',4,'面',0.219726704],
['q','i',3,'起',0.219599058],
['k','an',1,'看',0.219435237],
['d','ing',4,'定',0.218361357],
['t','ian',1,'天',0.216989810],
['f','en',1,'分',0.216730383],
['h','ai',2,'还',0.214907682],
['j','in',4,'进',0.213001262],
['h','ao',3,'好',0.212846226],
['x','iao',3,'小',0.212391972],
['b','u',4,'部',0.208298517],
['q','i',2,'其',0.208278879],
['x','ie',1,'些',0.206986916],
['zh','u',3,'主',0.206555401],
['y','ang',4,'样',0.205757485],
['l','i',3,'理',0.205725444],
['x','in',1,'心',0.202697600],
['t','a',1,'她',0.200828905],
['b','en',3,'本',0.200573613],
['q','ian',2,'前',0.197117871],
['k','ai',1,'开',0.194834197],
['d','an',4,'但',0.193514845],
['y','in',1,'因',0.192043557],
['q','i',2,'只',0.191240990],
['c','ong',1,'从',0.191188795],
['x','iang',3,'想',0.190600177],
['sh','i',2,'实',0.190432221],
['r','i',4,'日',0.187987311],
['j','un',1,'军',0.187348048],
['zh','e',3,'者',0.186545997],
['y','i',4,'意',0.186162543],
['w','u',2,'无',0.185662811],
['l','i',4,'力',0.185596146],
['t','a',1,'它',0.178897060],
['y','u',2,'与',0.178565801],
['ch','ang',2,'长',0.176817000],
['b','a',3,'把',0.176084199],
['j','i',1,'机',0.175615475],
['sh','i',2,'十',0.175166389]
		],

		// This function is specially for Chinese pinyin matching
		patterns: function( input, context ) {
			var m, n, h, pList = [], replacement, rule,
				$menu, $li, $ul,
				$element = this.$element,
				$selector = $element.data('imeselector').$imeSetting,
				unsorted = [], selections = [],
				k_n, dk, dn, d, score,
				beta = 30.0;

			// *************** Local Functions ****************

			// Decompose a pinyin spelling into consonant + nucleus form
			function k_n_form(str) {
				var c, consonants_1 = [
				// 'zh','ch','sh','z','c','s' are treated as special cases
				'b','p','m','f','d','t','n','l','g','k','h','j','q','w','x','y','r' ];

				// test for special cases:  z,c,s,zh,ch,sh
				c = str[0];
				if (c === 'z' || c === 'c' || c === 's') {
					if (str[1] === 'h') {
						return ([c + 'h', str.substr(2)]);
					}
					return ([c, str.substr(1)]);
				}

				// test for the rest
				for (h = 0; h < consonants_1.length; h++) {
					c = consonants_1[h];
					if (str[0] === c) {
						return ([c, str.substr(1)]);
					}
				}
				return (['', str]);
			}

			// Find distance between 2 consonants
			function distance_k(k1, k2) {

				var i, j,

// See dicts/mandarin/README-fuzzy-matching.html for an explanation
distance_matrix_K =
[
0.2,
1.0,1.0,
1.0,1.0,1.0,
0.7,0.7,1.0,1.0,
0.7,0.7,1.0,1.0,0.2,
1.0,1.0,0.7,1.0,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,
0.7,0.7,1.0,1.0,0.7,0.7,1.0,1.0,
0.7,0.7,1.0,1.0,0.7,0.7,1.0,1.0,0.2,
1.0,1.0,1.0,0.8,1.0,1.0,1.0,1.0,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.3,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.7,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.1,0.3,1.0,0.3,1.0,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.1,1.0,0.3,1.0,1.0,0.3,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.3,1.0,0.1,1.0,1.0,0.3,0.3,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.2,0.3,1.0,0.3,1.0,1.0,0.2,0.3,0.3,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.2,1.0,0.3,1.0,1.0,0.3,0.2,0.3,0.3,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.3,1.0,0.2,1.0,1.0,0.3,0.3,0.2,0.3,0.3],

				// Note: this must be in the same order as in distance-matrix-pinyin.py
				consonants = ['b','p','m','f','d','t','n','l','g','k','h','j',
					'q','w','x','y','r', 'z','c','s','zh','ch','sh' ];

				if (k1 === k2)
					{ return 0.0; }

				i = consonants.indexOf(k1);
				j = consonants.indexOf(k2);
				// i = row, j = column
				// calculate position in triangular matrix:
				return distance_matrix_K[i * (i + 1)/ 2 + j];
			}

			// Find distance between 2 nuclei
			function distance_n(n1, n2) {

				var i2, j2,

distance_matrix_N =
[
0.5,
1.0,1.0,
1.0,1.0,0.5,
0.5,0.5,1.0,1.0,
0.4,0.5,1.0,1.0,0.5,
0.5,0.15,1.0,1.0,0.5,0.5,
1.0,1.0,0.1,0.5,1.0,1.0,1.0,
1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,
0.4,0.5,1.0,1.0,0.5,0.3,0.5,1.0,1.0,
0.5,0.15,1.0,1.0,0.5,0.5,0.15,1.0,1.0,0.5,
0.1,0.5,1.0,1.0,0.5,0.4,0.5,1.0,1.0,0.4,0.5,
1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,
1.0,1.0,0.5,0.3,1.0,1.0,1.0,0.5,0.3,1.0,1.0,1.0,0.5,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,
1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,
1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.3,1.0,1.0,0.5,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,1.0,1.0,1.0,
1.0,1.0,0.5,0.3,1.0,1.0,1.0,0.5,0.3,1.0,1.0,1.0,0.5,0.3,1.0,1.0,0.5,0.3,1.0,
1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,1.0,1.0,1.0,0.1,1.0,
0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,
1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.3,1.0,1.0,0.5,0.2,1.0,0.3,1.0,1.0,
0.5,0.5,1.0,1.0,0.15,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,
0.5,0.5,1.0,1.0,0.15,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.15,
0.1,0.5,1.0,1.0,0.5,0.4,0.5,1.0,1.0,0.4,0.5,0.1,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.5,0.5,
0.5,0.15,1.0,1.0,0.5,0.5,0.15,1.0,1.0,0.5,0.15,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.5,0.5,0.5,
1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.1,0.5,1.0,1.0,0.5,0.5,1.0,0.5,1.0,1.0,0.5,1.0,1.0,1.0,1.0,
1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.2,1.0,1.0,1.0,0.5,0.3,1.0,1.0,0.5,0.2,1.0,0.3,1.0,1.0,0.2,1.0,1.0,1.0,1.0,0.5,
0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.1,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.5,0.5,0.5,0.5,1.0,1.0,
0.5,0.15,1.0,1.0,0.5,0.5,0.15,1.0,1.0,0.5,0.15,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.5,0.5,0.5,0.15,1.0,1.0,0.5,
1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,0.1,0.5,1.0,0.5,1.0,1.0,0.5,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,
0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.1,1.0,0.5,0.5,0.5,0.5,1.0,1.0,0.5,0.5,1.0,
0.5,0.5,1.0,1.0,0.15,0.5,0.5,1.0,1.0,0.5,0.5,0.5,1.0,1.0,1.0,0.5,1.0,1.0,1.0,1.0,1.0,0.5,1.0,0.15,0.15,0.5,0.5,1.0,1.0,0.5,0.5,1.0,0.5,
1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.1,0.5,1.0,1.0,0.5,0.5,1.0,0.5,1.0,1.0,0.5,1.0,1.0,1.0,1.0,0.1,0.5,1.0,1.0,0.5,1.0,1.0,
1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.1,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,0.1,0.5,1.0,0.5,1.0,1.0,0.5,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,0.1,1.0,1.0,0.5],

				// Note: this must be in the same order as in distance-matrix-pinyin.py
				nuclei = ['a','ai','an','ang','ao','e','ei','en','eng','er','i','ia',
						'ian','iang','iao','ie','in','ing','io','iong','iu','o','ong',
						'ou','u','ua','uai','uan','uang','ue','ui','un','uo','ü','üan','ün'];

				if (n1 === n2)
					{ return 0.0; }

				i2 = nuclei.indexOf(n1);
				j2 = nuclei.indexOf(n2);
				return distance_matrix_N[i2 * (i2 + 1) / 2 + j2];
			}

			// ************ Main function begins here **************
			return input;
			//console.log('input = ' + input);
			pList = this.inputmethod.patternsList;

			// Find fuzzy match
			for (m = 0; m < pList.length; m++ ) {
				rule = pList[m];

				// 1. convert input to Consonant-Nucleus form
				k_n = k_n_form(input);

				// 2. calculate distance between consonants
				dk = distance_k(k_n[0], rule[0]);

				// 3. calculate distance between nuclei
				dn = distance_n(k_n[1], rule[1]);

				// 4. calculate overall distance
				d = 0.5*dk + 0.5*dn;

				// 5. calculate score
				// score = rule[4] * Math.exp(beta * (1.0 - d));

				unsorted.push([rule[3], (1.0 - d)]);

				//if (selections.length > 100)
				//	{ break; }
			}

			return input;
			// console.log("Selections = " + selections);

			// Sort selections by score
			unsorted.sort(function(a, b) {
					return (b[1] - a[1]);
				});

			// Get only the top 100 suggestions
			selections = unsorted.slice(0, 100);

			replacement = selections[0][0];

			// Create selection menu
			$menu = $('.ime-autocomplete', $selector);

			if (!$menu.length) {
				$menu = $('<div class="ime-autocomplete"></div>');
				$ul = $('<ul></ul>');
				$ul.appendTo($menu);
				$selector.append($menu);
			} else {
				$ul = $('ul', $menu);
				// Reset menu
				$ul.empty();
				$('li', $ul).navigate('destroy');
			}

			for (n = 0; n < selections.length; n++) {
				$li = $('<li></li>');
				$li.appendTo($ul)
					.text(selections[n][0])
					.data('replacement', selections[n][0]);
			}

			// Initialize jquery.navigate
			$('ul li', $menu).not('.nokeyboard').navigate({
			wrap: true
		}).click(function(){
			var $input = $element,
				val = $input.val(),
				newReplacement = $(this).data('replacement'),
				pos = val.lastIndexOf(replacement);

			// Reset
			$('li', $ul).navigate('destroy');
			$menu.remove();
			$input.val( val.substr(0, pos) + newReplacement ).focus();
		});

			// Positioning the menu
			var selectorPosition = $selector.position();

			// Input string match test
			return input.replace( selections[0][0], replacement );
		}

	};
	$.ime.register( cn );
}( jQuery ) );
